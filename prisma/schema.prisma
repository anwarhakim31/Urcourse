generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User{
  id String @id @default(uuid())
  email String @unique 
  fullname String 
  password String
  phone Int? @db.Integer
  photo String?
  isAdmin Boolean @default(false)
  createdAt DateTime @default(now())
  purchases Purchase[]

  @@map("users")
}


model ResetToken{
  id String @id @default(uuid())
  user String 
  expired Int
  createdAt DateTime @default(now())

  @@map("resetToken")
}

model Course{
  id String @id @default(uuid())
  title String @db.Text
  description String? @db.Text
  image String? @db.Text
  price Float?
  isPublished Boolean @default(false)
  
  level Level?

  categoryId String?
  category Category? @relation(fields: [categoryId],references: [id] ,onDelete: SetNull)

  curriculum Curriculum? 

   purchases   Purchase[]
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category{
  id String @id @default(uuid())
  name String @unique
  course Course[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Curriculum{
  id String @id @default(uuid())
    
  courseId String @unique
  course Course @relation(fields: [courseId] ,references: [id],onDelete: Cascade)
  lastPosition Int @default(0)
  module Module[]
  exercise Exercise[]
  

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([courseId])
}

model Exercise {
  id          String     @id @default(uuid())
  title       String
  type        TypeCurriculum @default(exercise)
  description String? @db.Text
  isPublished Boolean @default(false)
  question    String     
  answer      Json
  correctAnswer Int    
  position Int
  resourse Resource[]


  curriculumId String
  curriculum  Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  proggress Proggress[] 

  createdAt DateTime @default(now())
}

model Module{
  id String @id @default(uuid())
  isPublished Boolean @default(false)
  title String
  type    TypeCurriculum @default(module)
  description String? @db.Text
  position Int
  video String?
  muxData MuxData?
  resourse Resource[]


  curriculumId String
  curriculum  Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  proggress Proggress[] 

  isFree Boolean @default(false)

  createdAt DateTime @default(now())
}


model Proggress{
  id String @id @default(uuid())
  userId String

  moduleId String? 
  module Module? @relation(fields: [moduleId],references: [id],onDelete:Cascade)
  isComplated  Boolean @default(true)

  exerciseId String? 
  exercise Exercise? @relation(fields: [exerciseId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())

 @@unique([userId,moduleId,exerciseId])

}




model MuxData{
    id String @id @default(uuid())
    assetsId String
    playbackId String?
    

    moduleId String    @unique  
    module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model Resource{
  id String @id @default(uuid())
  name String
  file String 

  
  moduleId String?  
  module   Module? @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  exerciseId String? 
  exercise Exercise? @relation(fields: [exerciseId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}




model Attachment{
  id String @id @default(uuid())
  name String 
  url String

  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}


model Purchase {
  id          String         @id @default(uuid())
  userId      String
  courseId    String
  price       Float
  status      PurchaseStatus
  createdAt   DateTime      @default(now())
  transactions Transaction[]

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}
model Transaction {
  id              String         @id @default(uuid())
  purchaseId      String
  invoice  String? @unique
  paymentMethod   PaymentMethod
  paymentName     String
  paymentCode      String        
  expired         DateTime  
  amount          Float
  status          TransactionStatus
  createdAt       DateTime       @default(now())
  updatedAt       DateTime @updatedAt

  purchase Purchase @relation(fields: [purchaseId], references: [id])
}

enum PurchaseStatus {
  PENDING
  PAID
  EXPIRED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethod {
  EWALLET
  VIRTUAL_ACCOUNT
  OVER_THE_COUNTER
  CREDIT_CARD
}
enum Level {
  Beginner
  Intermediate
  Advanced
}

enum TypeCurriculum {
  exercise
  module
}